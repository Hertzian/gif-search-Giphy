{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","setImages","useEffect","then","imgs","useFetchGifs","GifExpertApp","cat","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"uNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAmBhD,OACE,uBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBACFC,QAAQC,IAAIN,GAERA,EAAWO,OAAOC,OAAS,IAC7BV,GAAc,SAACW,GAAD,OAAiBT,GAAjB,mBAAgCS,OAC9CR,EAAc,MAKhB,UACE,6BAAKD,IACL,uBAAOU,KAAK,OAAOC,MAAOX,EAAYY,SAlBhB,SAACT,GAEzBF,EAAcE,EAAEU,OAAOF,c,+BCTdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXjB,kBAiBdM,GAjBc,4CAAH,sDCGPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAInC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCNGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZhB,mBAAS,CACnCuB,KAAM,GACNa,SAAS,IAH6B,mBACjCP,EADiC,KACzBQ,EADyB,KAiBxC,OAXAC,qBAAU,WACRvB,EAAQC,GAAUuB,MAAK,SAACC,GACtBlC,QAAQC,IAAIiC,GAEZH,EAAU,CACRd,KAAMiB,EACNJ,SAAS,SAGZ,CAACpB,IAEGa,EDf2BY,CAAazB,GAAjCa,EADyB,EAC/BN,KAAca,EADiB,EACjBA,QAItB,OAFA9B,QAAQC,IAAI,UAAW6B,GAGrB,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEiBNe,EA/BM,WAAO,IAAD,EACW1C,mBAAS,CAC3C,kBAFuB,mBAClBU,EADkB,KACNX,EADM,KAczB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BACGW,EAAWe,KAAI,SAACkB,GAAD,OACd,cAAC,EAAD,CAAmB3B,SAAU2B,GAAfA,YChBTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OAEL,cAAC,EAAD,IAGFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.a1839993.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  // const [inputValue, setInputValue] = useState() // undefined\r\n  const [inputValue, setInputValue] = useState('') // ''\r\n\r\n  const handleInputChange = (e) => {\r\n    // console.log(e.target.value)\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    console.log(inputValue)\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((categories) => [inputValue, ...categories])\r\n      setInputValue('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2>{inputValue}</h2>\r\n      <input type='text' value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n}\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=dgXUvvwqDV4tuOW2xSV3I3bR69u0FCoS`\r\n  const resp = await fetch(url)\r\n  const { data } = await resp.json()\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url, // el ? es condicion de que si viene 'images' se utilice\r\n    }\r\n  })\r\n\r\n  // console.log(gifs)\r\n\r\n  return gifs // retorna un a promesa que debe resolverse\r\n}\r\n","import React from 'react'\r\n\r\n// export const GifGridItem = (props) => {\r\nexport const GifGridItem = ({ title, url }) => {\r\n  // console.log(props)\r\n  // console.log(title, url)\r\n\r\n  return (\r\n    <div className='card animate__animated animate__zoomIn'>\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from '../components/GifGridItem'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category)\r\n\r\n  console.log('loading', loading)\r\n\r\n  return (\r\n    <>\r\n      <h3 className='animate__animated animate__zoomIn'>{category}</h3>\r\n\r\n      {loading && <p className='animate__animated animate__flash'>Loading...</p>}\r\n\r\n      <div className='card-grid'>\r\n        {images.map((img) => (\r\n          <GifGridItem\r\n            key={img.id}\r\n            {...img} // cada una de las propiedades de la img independiente\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [images, setImages] = useState({\r\n    data: [],\r\n    loading: true,\r\n  })\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      console.log(imgs)\r\n\r\n      setImages({\r\n        data: imgs,\r\n        loading: false,\r\n      })\r\n    })\r\n  }, [category])\r\n\r\n  return images // {data: [], loading: true}\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\r\n    'One Punch Man',\r\n    // 'Samurai X',\r\n    // 'Dragon Ball',\r\n  ])\r\n\r\n  // const handleAdd = () => {\r\n  //   // setCategories([...categories, 'HunterXHunter'])\r\n  //   setCategories(category => [...categories, 'HunterXHunter'])\r\n  //   // console.log(categories)\r\n  // }\r\n  // console.log(categories)\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n      <ol>\r\n        {categories.map((cat) => (\r\n          <GifGrid key={cat} category={cat} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GifExpertApp\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'animate.css'\nimport GifExpertApp from \"./GifExpertApp\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <GifExpertApp />\n    ,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}